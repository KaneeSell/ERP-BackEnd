// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  guest
  user
  admin
  developer
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  entidadeId Int?
  entidade   Entidade? @relation(fields: [entidadeId], references: [id])
  email      String    @unique
  password   String
  role       Role      @default(guest)
  isActive   Boolean   @default(true)
  lastLogin  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Produtos {
  id                 Int                  @id @default(autoincrement())
  name               String
  value              Float
  valueVenda         Float                @default(0)
  isAtive            Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  movimentos         Movimento_Estoque[]
  itensPedidoDeVenda Item_PedidoDeVenda[]
}

model Estoque {
  id         Int                 @id @default(autoincrement())
  name       String              @unique
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  deletedAt  DateTime?
  movimentos Movimento_Estoque[]
}

enum Tipo {
  Entrada
  Saida
}

model Movimento_Estoque {
  id         Int       @id @default(autoincrement())
  produtoId  Int
  produto    Produtos  @relation(fields: [produtoId], references: [id])
  estoqueId  Int
  estoque    Estoque   @relation(fields: [estoqueId], references: [id])
  descricao  String?
  tipo       Tipo
  quantidade Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Entidade {
  id             Int             @id @default(autoincrement())
  name           String
  email          String?
  telefone       String?
  endereco       String?
  cidade         String?
  estado         String?
  cep            String?
  creditoGasto   Float           @default(0)
  creditoLimite  Float           @default(0)
  creditoIsAtive Boolean         @default(false)
  isFornecedor   Boolean         @default(false)
  isCliente      Boolean         @default(false)
  cnpj           String?         @unique
  cpf            String?         @unique
  isAtive        Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  pedidosDeVenda PedidoDeVenda[]
  users          User[]
}

model PedidoDeVenda {
  id            Int                  @id @default(autoincrement())
  entidadeId    Int
  entidade      Entidade             @relation(fields: [entidadeId], references: [id])
  valorTotal    Float
  desconto      Float                @default(0)
  valorFinal    Float
  isPago        Boolean              @default(false)
  dataVenda     DateTime
  dataPagamento DateTime?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  deletedAt     DateTime?
  itens         Item_PedidoDeVenda[]
}

model Item_PedidoDeVenda {
  id              Int           @id @default(autoincrement())
  pedidoDeVendaId Int
  pedidoDeVenda   PedidoDeVenda @relation(fields: [pedidoDeVendaId], references: [id])
  produtoId       Int
  produto         Produtos      @relation(fields: [produtoId], references: [id])
  quantidade      Float
  valorUnitario   Float
  valorTotal      Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
}
